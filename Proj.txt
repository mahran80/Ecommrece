acounts App
views.py

from django.utils.http import urlsafe_base64_encode, urlsafe_base64_decode
from django.utils.encoding import force_bytes
from django.contrib.auth.tokens import default_token_generator
from django.core.mail import EmailMessage



def register(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            first_name = form.cleaned_data['first_name']
            last_name = form.cleaned_data['last_name']
            phone_number = form.cleaned_data['phone_number']
            email = form.cleaned_data['email']
            password = form.cleaned_data['password']
            username = email.split("@")[0]
            user = Account.objects.create_user(first_name=first_name, last_name=last_name, email=email, username=username, password=password)
            user.phone_number = phone_number
            user.save()

            # User Activation 
            current_site = get_current_site(request)
            mail_subject = 'Please activate your account'
            message = render_to_string('accounts/account_verification_email.html', {
                'user': user,
                'domain': current_site,
                'uid': urlsafe_base64_encode(force_bytes(user.pk)), # Encriypt id for user and decriypt id for user after activation
                'token': default_token_generator.make_token(user), # create token 
            })
            to_email = email
            send_email = EmailMessage(mail_subject , message, to=[to_email])
            send_email.send()
            # messages.success(request , 'Thanks you for register with us. we have send you a varification email to your email address. Please vrifiy it.')
            return redirect('/accounts/login/?command=verification&email='+email)
    else:
        form = RegistrationForm()
    context = {
        'form': form,
    }
    return render(request, 'accounts/register.html', context)            




def login(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')
        user = authenticate( request , email = email , password = password)
        if user is not None:
            auth.login(request , user)
            messages.success(request , 'Your are login now (:')
            return redirect('accounts:dashboard')
        else:
            messages.error(request , 'Invalid Error !')
            return redirect('accounts:login')

    return render(request , 'accounts/login.html')


@login_required(login_url='accounts:login')
def user_logout(request):
    logout(request)
    messages.success(request, 'You are logged out')
    return redirect('accounts:login')



def activate(request, uidb64, token):
    try:
        uid = urlsafe_base64_decode(uidb64).decode()
        user = Account._default_manager.get(pk=uid)
    except(TypeError, ValueError, OverflowError, Account.DoesNotExist):
        user = None

    if user is not None and default_token_generator.check_token(user, token):
        user.is_active = True
        user.save()
        messages.success(request, 'Congratulations! Your account is activated.')
        return redirect('accounts:login')
    else:
        messages.error(request, 'Invalid activation link')
        return redirect('accounts:register')
    



@login_required(login_url='login') # Not showing dashboard if login is not success
def dashboard(request):
    orders = OrderItem.objects.all()

    return render(request , 'accounts/dashboard.html' , {'orders':orders})




def forgotPassword(request):
    if request.method == 'POST':
        email = request.POST['email']
        if Account.objects.filter(email=email).exists():
            user = Account.objects.get(email__exact=email)

            # Reset password email
            current_site = get_current_site(request)
            mail_subject = 'Reset Your Password'
            message = render_to_string('accounts/reset_password_email.html', {
                'user': user,
                'domain': current_site,
                'uid': urlsafe_base64_encode(force_bytes(user.pk)),
                'token': default_token_generator.make_token(user),
            })
            to_email = email
            send_email = EmailMessage(mail_subject, message, to=[to_email])
            send_email.send()

            messages.success(request, 'Password reset email has been sent to your email address.')
            return redirect('accounts:login')
        else:
            messages.error(request, 'Account does not exist!')
            return redirect('accounts:forgotPassword')
    return render(request, 'accounts/forgotPassword.html')



def resetpassword_validate(request , uidb64 , token):
    # check the link is active 
    try:
        uid = urlsafe_base64_decode(uidb64).decode()
        user = Account._default_manager.get(pk=uid)
    except(TypeError, ValueError, OverflowError, Account.DoesNotExist):
        user = None
    if user is not None and default_token_generator.check_token(user, token):
        request.session['uid'] = uid
        messages.success(request , 'Please reset your password')
        return redirect('accounts:resetPassword')
    else:
        messages.error(request , 'This link has been expired !')
        return redirect('accounts:login')
    


def resetPassword(request):
    if request.method == 'POST':
        password = request.POST['password']
        confirm_password = request.POST['confirmpassword']
        if password == confirm_password:
            uid = request.session.get('uid')
            user = Account.objects.get(pk=uid)
            user.set_password(password)
            user.save()
            messages.success(request  ,'Password reset successfly')
            return redirect('accounts:login')
        else:    
            messages.error(request , 'Password does not match !')
            return redirect('accounts:resetPassword')
    else:    
       return render(request , 'accounts/resetPassword.html')
    

models.py
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager


# Create your models here.

class MyAccountManager(BaseUserManager):
    def create_user(self, first_name, last_name, username, email, password=None):
        if not email:
            raise ValueError('User must have an email address')

        if not username:
            raise ValueError('User must have an username')

        user = self.model(
            email = self.normalize_email(email),
            username = username,
            first_name = first_name,
            last_name = last_name,
        )

        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, first_name, last_name, email, username, password):
        user = self.create_user(
            email = self.normalize_email(email),
            username = username,
            password = password,
            first_name = first_name,
            last_name = last_name,
        )
        user.is_admin = True
        user.is_active = True
        user.is_staff = True
        user.is_superadmin = True
        user.save(using=self._db)
        return user


# User Account
class Account(AbstractBaseUser):
    first_name      = models.CharField(max_length=50)
    last_name       = models.CharField(max_length=50)
    username        = models.CharField(max_length=50, unique=True)
    email           = models.EmailField(max_length=100, unique=True)
    phone_number    = models.CharField(max_length=50)
    date_joined     = models.DateTimeField(auto_now_add=True)
    last_login      = models.DateTimeField(auto_now_add=True)
    is_admin        = models.BooleanField(default=False)
    is_staff        = models.BooleanField(default=False)
    is_active        = models.BooleanField(default=True)
    is_superadmin        = models.BooleanField(default=False)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username', 'first_name', 'last_name']
    objects = MyAccountManager()
    def full_name(self):
        return f'{self.first_name} {self.last_name}'

    def __str__(self):
        return self.username

    def has_perm(self, perm, obj=None):
        return self.is_admin

    def has_module_perms(self, add_label):
        return True


# class UserProfile(models.Model):
#     user = models.OneToOneField(Account, on_delete=models.CASCADE)
#     address_line_1 = models.CharField(blank=True, max_length=100)
#     address_line_2 = models.CharField(blank=True, max_length=100)
#     profile_picture = models.ImageField(blank=True, upload_to='userprofile')
#     city = models.CharField(blank=True, max_length=20)
#     state = models.CharField(blank=True, max_length=20)
#     country = models.CharField(blank=True, max_length=20)

#     def __str__(self):
#         return self.user.first_name

#     def full_address(self):
#         return f'{self.address_line_1} {self.address_line_2}'
urls.py
from django.urls import path
from . import views


app_name = 'accounts'

urlpatterns = [
    path('register/', views.register, name='register'),
    path('login/', views.login, name='login'),
    path('dashboard/' , views.dashboard , name='dashboard'),

    path('logout/', views.user_logout, name='logout'),
    path('dashboard/' , views.dashboard , name='dashboard'),
    path('' , views.dashboard , name='dashboard'),
    path('activate/<uidb64>/<token>/', views.activate, name='activate'),
    path('forgotPassword/', views.forgotPassword, name='forgotPassword'),
    path('resetpassword_validate/<uidb64>/<token>/', views.resetpassword_validate, name='resetpassword_validate'),
    path('resetPassword/', views.resetPassword, name='resetPassword'),

   
    ]
--------------------------------------------------------------------------------------
selleracountApp
views.py
from django.shortcuts import render
from django.http import HttpResponse
from django.contrib.auth import authenticate , login
from .forms import LoginForm , UserRegistrationForm , UserEditForm , ProfileEditForm
from django.contrib.auth.decorators import login_required
from .models import Profile
def register(request):
    if request.method == 'POST':
        user_form = UserRegistrationForm(request.POST)
        if user_form.is_valid():
            # Create a new user object but avoid saving it yet
            new_user = user_form.save(commit=False)
            # Set the chosen password
            new_user.set_password(
            user_form.cleaned_data['password'])
            # Save the User object
            new_user.save()
            # Create the user profile
            Profile.objects.create(user=new_user)
            return render(request, 'account/register.html' , {'new_user':new_user})
    else:
        user_form = UserRegistrationForm()
    return render(request, 'account/register.html' , {'user_form':user_form})

        
        



from django.contrib.auth.decorators import login_required
from django.shortcuts import render, get_object_or_404
from .forms import UserEditForm, ProfileEditForm
from .models import Profile



@login_required
def dashboard(request):
    try:
        profile = request.user.profile
    except Profile.DoesNotExist:
        # If profile does not exist, create a new one and set the user attribute
        profile = Profile(user=request.user)

    if request.method == 'POST':
        user_form = UserEditForm(instance=request.user, data=request.POST)
        profile_form = ProfileEditForm(instance=profile, data=request.POST, files=request.FILES)
        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile = profile_form.save(commit=False)
            profile.user = request.user  # Set the user attribute
            profile.save()
    else:
        user_form = UserEditForm(instance=request.user)
        profile_form = ProfileEditForm(instance=profile)

    return render(request, 'account/dashboard.html', {'section': 'dashboard', 'user_form': user_form, 'profile_form': profile_form})



# @login_required
# def edit(request):
#     if request.mehtod == 'POST':
#         user_form = UserEditForm(instance=request.user, date=request.POST)
#         profile_form = ProfileEditForm(instance=request.user.profile, data=request.POST , files=request.FILES)
#         if user_form.is_valid() and profile_form.is_valid():
#             user_form.save()
#             profile_form.save()
#     else:
#         user_form = UserEditForm(instance=request.user)
#         profile_form = ProfileEditForm(instance=request.user.profile)
#     return render(request , 'account/dashboard.html' , {'user_form':user_form , 'profile_form':profile_form})

models.py
from django.db import models
from django.conf import settings







class Profile(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL , on_delete=models.CASCADE)
    photo = models.ImageField(upload_to='users/%Y/%m/%d/' , blank=True)
    bio = models.TextField()



    def __str__(self):
        return f'Profile of {self.user.username}'
fforms.py
from django import forms  
from django.contrib.auth.models import User
from django.contrib.auth import get_user_model
from .models import Profile


from django import forms
from django.contrib.auth import authenticate
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

class LoginForm(forms.Form):
    username = forms.CharField(label='', widget=forms.TextInput(attrs={'class':'form-control' , 'placeholder':'User Name'}))
    password = forms.CharField(label='', widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': 'Password'}))

   



class UserRegistrationForm(forms.ModelForm):
    password = forms.CharField(label='Password', widget=forms.PasswordInput(attrs={'class':'form-control' , 'placeholder':'Password'}))
    password2 = forms.CharField(label='Repeat Password',widget=forms.PasswordInput(attrs={'class':'form-control' ,'placeholder':'Confirm Password'}))

    class Meta:
        User = get_user_model()
        model = User
        fields = ['username', 'first_name','last_name', 'email']
        widgets = {
            'username': forms.TextInput(attrs={'class': 'form-control', 'placeholder':'UserName'}),
            'first_name': forms.TextInput(attrs={'class': 'form-control','placeholder':'First Name'}),
            'last_name': forms.TextInput(attrs={'class': 'form-control','placeholder':'Last Name'}),
            'email': forms.EmailInput(attrs={'class': 'form-control','placeholder':'Email'}),
        }

    def clean_password2(self):
        cd = self.cleaned_data
        if cd['password'] != cd['password2']:
            raise forms.ValidationError('Password Don\'t Match.')
        return cd['password2']
        
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field_name in self.fields:
            self.fields[field_name].label = False







class UserEditForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['username', 'first_name','last_name', 'email']
        widgets = {
            'username': forms.TextInput(attrs={'class': 'form-control', 'placeholder':'UserName'}),
            'first_name': forms.TextInput(attrs={'class': 'form-control','placeholder':'First Name'}),
            'last_name': forms.TextInput(attrs={'class': 'form-control','placeholder':'Last Name'}),
            'email': forms.EmailInput(attrs={'class': 'form-control','placeholder':'Email'}),
        }



class ProfileEditForm(forms.ModelForm):
    class Meta:
        model = Profile
        fields = ['photo' , 'bio']  
        widgets = {
            'photo': forms.FileInput(attrs={'class': 'form-control', 'placeholder':'Logo'}),
            'bio': forms.Textarea(attrs={'class': 'form-control','placeholder':'Bio '}),
            
        }

urls.py
# urls.py

from django.urls import path, include
from . import views
from django.contrib.auth import views as auth_views


app_name = 'seller_account'

urlpatterns = [

    path('' , include('django.contrib.auth.urls')),
    path('', views.dashboard, name='dashboard'),
    path('register/', views.register, name='register'),
    # path('edit/', views.edit, name='edit'),


]
--------------------------------------------------------------------------------------
sellerApp

views.py
from django.shortcuts import render , redirect , get_object_or_404
from django.http import FileResponse
from django.conf import settings
import os
from .forms import ProductForm , OrderForm
from store.models import Product
from orders.models import OrderItem , Order
from django.contrib.auth.decorators import login_required



def why_us(request):
    return render(request , 'seller/why_us.html')




def download_pdf(request):
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'pdf/beginer.pdf')
    return FileResponse(open(pdf_path, 'rb'), content_type='application/pdf')



def dashboard(request , ):
    orders = OrderItem.objects.all().order_by('-created')
    context = {
        'orders':orders
    }

    return render(request , 'seller/dashboard_sell.html' , context)




@login_required
def products(request):
    seller_id = request.user.id  # Assuming seller_id is the same as user id
    if request.method == 'POST':
        add_product = ProductForm(request.POST, request.FILES)
        if add_product.is_valid():
            # Set the seller for the product before saving
            product = add_product.save(commit=False)
            product.seller_id = seller_id
            product.save()
            return redirect('seller:successfully')

    forms = ProductForm()
    # Filter products based on the seller_id
    seller_products = Product.objects.filter(seller_id=seller_id).order_by('-created')
    context = {
        'form': forms,
        'seller_products': seller_products,
    }
    return render(request, 'seller/products_seller.html', context)


def successfully(request):
    return render(request , 'seller/success.html')



@login_required
def update(request , id):
    product_id = Product.objects.get(id=id , available=True)
    if request.method == 'POST':
        product_save = ProductForm(request.POST , request.FILES , instance=product_id)
        if product_save.is_valid():
            product_save.save()
            return redirect('seller:products')
    else:
        product_save = ProductForm(instance=product_id) 
    context = {
        'form':product_save
    }           


    return render(request , 'seller/update.html' , context)


@login_required
def delete(requset , id):
    product_delete = get_object_or_404(Product , id=id , available=True)
    if requset.method == 'POST':
        product_delete.delete()
        return redirect('seller:products')
    return render(requset , 'seller/delete.html')






@login_required
def order_delete(request, id):
    # Get the order or return a 404 error if it doesn't exist
    order = get_object_or_404(OrderItem, id=id)
    
    if request.method == 'POST':
        order.delete()
        return redirect('seller:dashboard')
    context = {
        'order_id':order
    }

    return render(request, 'seller/order_delete.html' , context)



def status(request):
    orders = OrderItem.objects.all()
    
    rejections = orders.filter(status=OrderItem.Status.Rejection)
    shippings = orders.filter(status=OrderItem.Status.Shipping)
    processings = orders.filter(status=OrderItem.Status.Pending)
    
    context = {
        'orders': orders.count(),
        'rejections_count': rejections.count(),
        'shipping_count': shippings.count(),
        'processing_count': processings.count(),
        
    }

    return render(request, 'n_f_dash/status.html', context)



def analytics(request):
    return render(request , 'seller/analytics.html')




forms.py

from django import forms
from store.models import Product
from orders.models import Order 

from django.utils.text import slugify

class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = ['name', 'seller' ,'category', 'image', 'description', 'price', 'old_price', 'stock', 'available' ]
        widgets = {
            "name": forms.TextInput(attrs={'class': 'form-control'}),
            "seller": forms.Select(attrs={'class': 'form-control'}),
            "category": forms.Select(attrs={'class': 'form-control'}),
            "image": forms.FileInput(attrs={'class': 'form-control'}),
            "description": forms.TextInput(attrs={'class': 'form-control'}),
            "price": forms.NumberInput(attrs={'class': 'form-control'}),
            "old_price": forms.NumberInput(attrs={'class': 'form-control'}),
            "stock": forms.NumberInput(attrs={'class': 'form-control'}),
            "available": forms.CheckboxInput(attrs={'class': 'form-check-input'}),
        }

    def save(self, commit=True):
        instance = super(ProductForm, self).save(commit=False)
        instance.slug = slugify(instance.name)  # Generate slug from the name field
        if commit:
            instance.save()
        return instance
    

class OrderForm(forms.ModelForm):
    class Meta:
        model = Order
        fields = ['first_name' , 'last_name' , 'email' , 'address' , 'phone' , 'postal_code' , 'notes', 'city' , 'paid']

        widgets = {
            "first_name": forms.TextInput(attrs={'class': 'form-control'}),
            "last_name": forms.TextInput(attrs={'class': 'form-control'}),
            "email": forms.EmailInput(attrs={'class': 'form-control'}),
            "address": forms.TextInput(attrs={'class': 'form-control'}),
            "phone": forms.NumberInput(attrs={'class': 'form-control'}),
            "postal_code": forms.NumberInput(attrs={'class': 'form-control'}),
            "notes": forms.TextInput(attrs={'class': 'form-control'}),
            "city": forms.TextInput(attrs={'class': 'form-check-input'}),
            "paid": forms.CheckboxInput(attrs={'class': 'form-check-input'}),

        }





urls.py

from django.urls import path
from . import views


app_name = 'seller'


urlpatterns = [
    path('why-us/' , views.why_us , name='why_us'),
    path('download-pdf/', views.download_pdf, name='download_pdf'),
    path('dashboard' , views.dashboard , name='dashboard'),
    path('my-products/' , views.products , name='products'),
    path('successfully/' , views.successfully , name='successfully'),
    path('analytics/' , views.analytics , name='analytics'),
    path('<int:id>/update-product/' , views.update , name='update'),
    path('delete/<int:id>/' , views.delete , name='delete'),
    path('order/<int:id>/delete/', views.order_delete, name='order_delete'),





    

]



--------------------------------------------------------------------------------------
storeApp
views.py
from django.shortcuts import render , get_object_or_404
from .models import Category , Product
from cart.forms import CartAddProductForm
from django.contrib.postgres.search import SearchVector
from django.views.decorators.http import require_POST
from .forms import CommentForm


def product_list(request , category_slug=None):
    MAX_PRODUCTS = 8
    category = None
    categories = Category.objects.all()
    products = Product.objects.all().filter(available=True).order_by('-created')[:MAX_PRODUCTS]
    if category_slug:
        category = get_object_or_404(Category , slug=category_slug)
        products = products.filter(category=category)
    context = {
        'categories':categories,
        'category':category,
        'products':products,
    }    
    return render(request , 'store/home.html' , context)





def product_detail(request , id , slug):
    product = get_object_or_404(Product , id=id , slug=slug , available=True)
    cart_product_form = CartAddProductForm()
    comments = product.comments.filter(active=True)
    form = CommentForm()
    context = {
        'product':product,
        'cart_product_form':cart_product_form,
        'comments':comments,
        'form':form,
        
    }
    return render(request , 'store/product_detail.html' , context)





def store(request , category_slug=None) -> None:
    category = None
    categories = Category.objects.all()
    products = Product.objects.all().filter(available=True).order_by('-created')
    if category_slug:
        category = get_object_or_404(Category , slug=category_slug)
        products = products.filter(category=category)
    # hendle search  
    name = None
    price_form = None
    price_to = None
    if 'query' in request.GET:
        name = request.GET['query'] 
        if name: # check name is exsist ?
            products = products.filter(name__icontains=name) 
    
    if 'searchpricefrom' in request.GET and 'searchpriceto' in request.GET:
        price_form = request.GET['searchpricefrom']
        price_to = request.GET['searchpriceto']
        if price_form and price_to:  # check price is exsist ?
            if price_form.isdigit() and price_to.isdigit(): # check price is digit !
                products = products.filter(price__gte=price_form , price__lte=price_to)

   
    context = {
        'categories':categories,
        'category':category,
        'products':products,
    }

    return render(request, 'store/store.html' , context)

"""
We use the require_POST decorator provided by Django to
only allow POST requests for this view 
"""


@require_POST
def product_comment(request , product_id):
    prodcut = get_object_or_404(Product , id=product_id , available=True)
    comment = None

    form = CommentForm(data=request.POST)
    if form.is_valid():
        comment = form.save(commit=False)
        comment.prodcut = prodcut
        comment.save()
    context = {
        'form':form,
        'comment':comment, 
        'product':prodcut,
    }    

    return render(request , 'sotre/comment.html' , context)


models.py
from django.db import models
from django.urls import reverse
from django.conf import settings





class Category(models.Model):
    name = models.CharField(max_length=250)
    slug = models.SlugField(unique=True , max_length=250)
    image = models.ImageField(upload_to='category/%Y/%m/%d' , blank=True)


    class Meta:
        ordering = ['name']
        indexes = [
            models.Index(fields=['name'])
        ]

        verbose_name = 'category'
        verbose_name_plural = 'Categories'



    def __str__(self):
        return self.name
    
    
    def get_absolute_url(self):
        return reverse("store:product_by_category", args=[self.slug])
    
    




class Product(models.Model):
    category = models.ForeignKey(Category , related_name="products" , on_delete=models.CASCADE)
    name = models.CharField(max_length=250)
    seller = models.ForeignKey(settings.AUTH_USER_MODEL, related_name='seller',on_delete=models.CASCADE , null=True)
    slug = models.SlugField(unique=True , max_length=250)
    image = models.ImageField(upload_to='products/%Y/%m/%d' , blank=True)
    description = models.TextField(blank=True)
    price = models.DecimalField(max_digits=10 , decimal_places=2)
    old_price = models.DecimalField(max_digits=10 , decimal_places=2)
    stock = models.IntegerField(default=0)
    available = models.BooleanField(default=True)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)


    class Meta:
        ordering = ['name']
        indexes = [
            models.Index(fields=['id' , 'slug']),
            models.Index(fields=['name']),
            models.Index(fields=['-created']),
        ]

    def __str__(self):
        return self.name
    
    def get_absolute_url(self):
        return reverse('store:product_detail', args=[self.id, self.slug])
    




class Comments(models.Model):
    product = models.ForeignKey(Product , on_delete=models.CASCADE , related_name='comments')
    name = models.CharField(max_length=100)
    email = models.EmailField()
    content = models.TextField(blank=True , null=True)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    active = models.BooleanField(default=True)

    class Meta:
        verbose_name = "Comments"
        verbose_name_plural = "Comments"


    def __str__(self):
        return f'{self.name} By {self.product}'

    class Meta:
        ordering = ['-created']
        indexes = [
            models.Index(fields=['-created'])
        ]   

    def __str__(self):
        return f'Comment by {self.name} on {self.product}'    

























class VariationManager(models.Manager):
    # Just get color    
    def get_color(self):
        return super(VariationManager , self).filter(Variation_category='color' , is_active=True)
    # just get size
    def get_size(self):
        return super(VariationManager , self).filter(Variation_category='size' , is_active=True)


Variation_category_choices =(
    ('color' , 'color'),
    ('size' , 'size'),
)




class Variation(models.Model):
    product = models.ForeignKey(Product , on_delete=models.CASCADE)
    Variation_category = models.CharField(max_length=100 , choices=Variation_category_choices)
    variation_value = models.CharField(max_length=100)
    is_active = models.BooleanField(default=True)
    
    created_date = models.DateTimeField(auto_now=True)
    
    objects = VariationManager()

















# class Comment(models.Model):
#     product = models.ForeignKey(Product , on_delete=models.CASCADE , related_name='comments')
#     name = models.CharField(max_length=100)
#     email = models.EmailField()
#     body = models.TextField()
#     created = models.DateTimeField(auto_now_add=True)
#     updated = models.DateTimeField(auto_now=True)
#     active = models.BooleanField(default=True)

#     class Meta:
#         ordering = ['created']
#         indexes = [
#             models.Index(fields=['created'])
#         ]

#     def __str__(self):
#         return f'Comment by {self.name} on {self.product}'     

forms.py
from django import forms 
from .models import Comments



class CommentForm(forms.ModelForm):
    class Meta:
        model = Comments
        fields = ['name' , 'email' , 'content']

        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control' , 'placeholder':'Your Name'}),
            'email': forms.EmailInput(attrs={'class': 'form-control', 'placeholder':'Your Email'}),
            'content': forms.Textarea(attrs={'class': 'form-control', 'placeholder':'Comment'}),
        }


    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field_name in self.fields:
            self.fields[field_name].label = False


urls.py
from django.urls import path
from . import views



app_name = 'store'


urlpatterns = [
    path('' , views.product_list , name='product_list'),
    path('products/' , views.store , name='products'),
    path('category/<slug:category_slug>/' , views.store , name='product_by_category'),
    path('<slug:category_slug>/' , views.product_list , name='product_list_by_category'),
    path('<int:id>/<slug:slug>/' , views.product_detail , name='product_detail'),
    path('<int:product_id>/comment/' , views.product_comment , name='product_comment')
    

]




--------------------------------------------------------------------------------------

OrderApp
views.py
from django.shortcuts import render , get_object_or_404
from .models import OrderItem , Order
from .forms import OrderCreateForm
from cart.cart import Cart
from .tasks import order_created , order_completed
from django.contrib.admin.views.decorators import staff_member_required


# bill pdf
import weasyprint # type: ignore
from django.template.loader import render_to_string
from django.conf import settings
from django.http import HttpResponse





def order_create(request):
    cart = Cart(request)  # get cart from the session
    if request.method == 'POST':
        form = OrderCreateForm(request.POST)
        if form.is_valid():
            order = form.save()
            for item in cart:
                OrderItem.objects.create(order=order, product=item['product'], price=item['price'], quantity=item['quantity'])

            cart.clear()
            order_created.delay(order.id)  # excute the task
            order_completed.delay(order.id)  # excute the task

            return render(request, 'orders/created.html', {'order': order})  # Corrected the context dictionary
    else:
        form = OrderCreateForm()
    return render(request, 'orders/create.html', {'cart': cart, 'form': form})

from django.shortcuts import render
from django.http import HttpResponse
from .tasks import order_completed





def user_orders(request):
    orders = OrderItem.objects.all()
    order_id = request.GET.get('trakingorder')

    if order_id and order_id.isdigit():
        # Use filter to get orders with the specified ID
        orders = orders.filter(id=int(order_id))

    context = {
        'orders': orders,
    }

    return render(request, 'orders/tracking_order.html', context)
from cart.cart import Cart
import os

@staff_member_required
def admin_order_pdf(request, order_id):
    order = get_object_or_404(Order, id=order_id)
    html = render_to_string('orders/pdf.html', {'order': order })
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = f'filename=order_{order_id}.pdf'
    css_path = os.path.join(settings.STATICFILES_DIRS[0], 'css', 'pdf.css')
    weasyprint.HTML(string=html).write_pdf(response, stylesheet=[weasyprint.CSS(css_path)])
    return response

models.py
from django.db import models
from store.models import Product
import datetime
from decimal import Decimal
from django.conf import settings


class Order(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    email = models.EmailField()
    address = models.CharField(max_length=250)
    phone = models.IntegerField(default=0)
    postal_code = models.CharField(max_length=20)
    city = models.CharField(max_length=100)
    notes = models.CharField(max_length=500 , blank=True , null=True)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now_add=True)
    paid = models.BooleanField(default=False) # the Pay


    class Meta:
        ordering = ['-created']
        indexes = [
            models.Index(fields=['-created']),
        ]

    def __str__(self):
        return f"Order {self.id}"
    
    def get_tax(self):
        total = self.get_total_cost()
        tax_rate = Decimal(1.5)  # Assuming 1.5% tax rate, modify as needed
        tax = (tax_rate / 100) * total
        rounded_tax = round(tax, 2)

        return rounded_tax
  

    def get_total_cost(self):
        return sum(item.get_cost() for item in self.items.all())      
    

    
    def total_after_discount_with_tax(self):
        return self.get_tax() + self.get_total_cost()
    


class OrderItem(models.Model):
    class Status(models.TextChoices):
        Rejection = 'REJECTION', 'REJECTION'
        Pending = 'PENDING', 'PENDING'
        Shipping = 'SHIPPING', 'SHIPPING'
        
    order = models.ForeignKey(Order , on_delete=models.CASCADE , related_name="items")
    product = models.ForeignKey(Product , on_delete=models.CASCADE , related_name="oreder_items")
    price = models.DecimalField(max_digits=10 , decimal_places=2)
    quantity = models.PositiveIntegerField(default=1)
    status = models.CharField(choices=Status.choices , max_length=10, default=Status.Pending )
    created = models.DateTimeField(auto_now_add=True , null=True)
    order_date = models.DateField(auto_now=True)

    def __str__(self):
        return str(self.id)
    
    def get_cost(self):
        return self.price * self.quantity

forms.py
from django import forms
from .models import Order
class OrderCreateForm(forms.ModelForm):
    class Meta:
        notes = forms.CharField(max_length=250 , widget=forms.TextInput(attrs={
        
        'placeholder': 'Enter notes',
        'class': 'form-control',
        }))
        model = Order
        fields = ['first_name' , 'last_name' , 'phone' , 'email' , 'address' , 'postal_code' , 'city' , 'notes']
    
    def __init__(self , *args , **kwargs):
        super(OrderCreateForm , self).__init__(*args , **kwargs)
        self.fields['first_name'].widget.attrs['placeholder'] = 'Enter First Name'   
        self.fields['last_name'].widget.attrs['placeholder'] = 'Enter last Name'
        self.fields['phone'].widget.attrs['placeholder'] = 'Enter Phone Number'
        self.fields['email'].widget.attrs['placeholder'] = 'Enter email'
        self.fields['address'].widget.attrs['placeholder'] = 'Enter address'
        self.fields['postal_code'].widget.attrs['placeholder'] = 'Enter postal_code'
        self.fields['city'].widget.attrs['placeholder'] = 'Enter City'
        self.fields['notes'].widget.attrs['placeholder'] = 'Enter notes here (:'


        for field in self.fields:
            self.fields[field].widget.attrs['class'] = 'form-control'

        






urls.py

from django.urls import path
from . import views

app_name = 'orders'

urlpatterns = [
    path('create/' ,views.order_create , name='order_create'),
    path('traking-order/' , views.user_orders , name='traking'),
    path('admin/order/<int:order_id>/pdf/', views.admin_order_pdf , name="admin_order_pdf"),
    
]
tasks.py
from celery import shared_task
from django.core.mail import send_mail
from .models import Order
from io import BytesIO
import weasyprint # type: ignore
from django.template.loader import render_to_string
from django.core.mail import EmailMessage , send_mail
from orders.models import Order
from django.conf import settings
import os


# To Confirm Order
@shared_task
def order_created(order_id):
    """
    Task to send an e-mail notification when an order is successfully placed.
    """
    order = Order.objects.get(id=order_id)
    subject = f'Order Number. {order.id}'
    message = f'Dear {order.first_name},\n\n' \
              f'You have successfully placed an order. Your order ID is {order.id}.\n' \
              f'Customer-Serves: 01141125185'
    mail_sent = send_mail(subject, message, 'ahmed.mahran8069@gmail.com', [order.email])
    return mail_sent




# To Bill PDF 
@shared_task
def order_completed(order_id):
    try:
        order = Order.objects.get(id=order_id)
        subject = f'Promo - Invoice no. {order_id}'
        message = 'Please find attached the Invoice for your recent purchase.'
        
        # Generate PDF
        html = render_to_string('orders/pdf.html', {'order': order})
        out = BytesIO()
        css_path = os.path.join(settings.STATICFILES_DIRS[0], 'css', 'pdf.css')
        weasyprint.HTML(string=html).write_pdf(out, stylesheets=[weasyprint.CSS(css_path)])
        
        # Create email message
        email = EmailMessage(subject, message, settings.EMAIL_HOST_USER, [order.email])
        email.attach(f'order_{order_id}.pdf', out.getvalue(), 'application/pdf')
        
        # Send email
        email.send()
    except Order.DoesNotExist:
        raise ('Order Dose Not Exist!')
    except Exception as e:
        print(f"An error occurred: {str(e)}")






--------------------------------------------------------------------------------------




cartApp
views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.views.decorators.http import require_POST
from store.models import Product
from .cart import Cart
from .forms import CartAddProductForm
from coupons.forms import CouponApplyForm



# the require_POST decorator to allow only POST requests
@require_POST
def cart_add(request , product_id):
    cart = Cart(request)
    product = get_object_or_404(Product , id=product_id)
    form = CartAddProductForm(request.POST)
    if form.is_valid():
        cd = form.cleaned_data
        cart.add(product=product , quantity=cd['quantity'] , overide_quantity=cd['override'])
    return redirect('cart:cart_detail')
    


@require_POST
def cart_remove(request , product_id):
    cart = Cart(request)
    product = get_object_or_404(Product , id=product_id)
    cart.remove(product)
    return redirect('cart:cart_detail')




def cart_detail(request):
    cart = Cart(request)
    for item in cart:
        item['update_quantity_form'] = CartAddProductForm(initial={'quantity':item['quantity'], 'override':True})
    coupon_apply_form = CouponApplyForm()
    total_price = cart.get_total_price() 
    tax = cart.get_tax()
    total = total_price + tax
   
  
    context = {
        'cart':cart,
        'tax':tax,
        'total':total,
        'coupon_apply_form': coupon_apply_form,
        'total_price':total_price,
       
        
    }
    return render(request , 'store/cart_detail.html' , context)
cart.py
from decimal import Decimal
from django.conf import settings
from store.models import Product
from coupons.models import Coupon


# Management Cart 
class Cart:
    def __init__(self , request) :
        
        self.session = request.session   # store session
        cart = self.session.get(settings.CART_SESSION_ID)  # you try to get the cart from the current session
        if not cart:
            """ If no cart is present in the session,
              you create an empty cart by setting an
                empty dictionary in the session
            """
            cart = self.session[settings.CART_SESSION_ID] = {} # # save an empty cart in the session
        self.cart = cart    
        # store current applied coupon
        self.coupon_id = self.session.get('coupon_id')  # get coupon ID from session

    
    @property
    def coupon(self):
        if self.coupon_id:
            try:
                return Coupon.objects.get(id=self.coupon_id)
            except Coupon.DoesNotExist:
                pass
        return None



    def get_discount(self):
        if self.coupon:
            return (self.coupon.discount / Decimal(100)) * self.get_total_price()
        return Decimal(0) # not discount    
    
    def get_total_price_after_discount(self):
        return  self.get_total_price() - self.get_discount() 
    
    
    def total_after_discount_with_tax(self):
        return self.get_total_price_after_discount() + self.get_tax()

        

    def add(self , product , quantity=1 , overide_quantity=False): 
        """
        Add a product to the cart or update its quantity.
        """
        product_id = str(product.id) 
        if product_id not in self.cart:       
            self.cart[product_id] = {'quantity': 0 , 'price':str(product.price)}

        if overide_quantity:
            self.cart[product_id]['quantity'] = quantity
        else:
            self.cart[product_id]['quantity'] += quantity
        self.save()    

    # save session and tell django to modified        
    def save(self):
        self.session.modified = True   

    def remove(self , product):
        """
        Remove a product from the cart.
        """
        product_id = str(product.id)
        if product_id in self.cart:
            del self.cart[product_id]
            self.save()


    def __iter__(self):
        """
        Iterate over the items in the cart and get the products
        from the database.
        """

        product_ids = self.cart.keys()
        # get the product objects and add them to the cart
        products = Product.objects.filter(id__in=product_ids)
        cart = self.cart.copy()
        for product in products:
            cart[str(product.id)]['product'] = product
        for item in cart.values():
            item['price'] = Decimal(item['price'])
            item['total_price'] = item['price'] * item['quantity']    
            yield item

    def __len__(self):
        """
        Count all items in the cart.
        """
        # You return the sum of the quantities of all the cart items.        
        return sum(item['quantity'] for item in self.cart.values()) 


    def get_total_price(self):
        """
        calculate the total cost of the items in the cart
        """
        total = sum(Decimal(item['price']) * item['quantity']  for item in self.cart.values())
        return total
    

    def get_tax(self):
        total = self.get_total_price()
        tax_rate = Decimal(1.5)  # Assuming 1.5% tax rate, modify as needed
        tax = (tax_rate / 100) * total
        rounded_tax = round(tax, 2)

        return rounded_tax
  
   



    def clear(self):
        # clear the cart session
        del self.session[settings.CART_SESSION_ID]
        self.save()
forms.py
from django import forms
from coupons.forms import CouponApplyForm

PRODUCT_QUANTITY_CHOICES = [(i, str(i)) for i in range(1,51)]


class CartAddProductForm(forms.Form):
    quantity = forms.TypedChoiceField(choices=PRODUCT_QUANTITY_CHOICES , coerce=int ,widget=forms.Select(attrs={'class': 'form-control' }) , label='')
    override = forms.BooleanField(required=False , initial=False , widget=forms.HiddenInput)
    
contextproceccors.py
from .cart import Cart


def cart(request):
    return {'cart':Cart(request)}
urls.py
from django.urls import path
from . import views


app_name = 'cart'

urlpatterns = [
    path('', views.cart_detail , name='cart_detail'),
    path('<int:product_id>/' , views.cart_add , name='cart_add'),
    path('remove/<int:product_id>/' , views.cart_remove , name='cart_remove'),
]
-----------------------------------------------------------------------------------------
ContactUsApp
views,py
from django.shortcuts import render
from .forms import ContactForm
from django.core.mail import send_mail






def contact_us(request):
    sent = False
    if request.method == 'POST':
        form = ContactForm(request.POST)
        if form.is_valid():
            cd = form.cleaned_data
            # name = f"From :{cd['name']}"
            subject = f"{cd['subject']}"
            message = f"{cd['message']}"
            send_mail(subject , message , 'ahmed.mahran8069@gmail.com' , [cd['email']])
            sent = True
    else:
        form = ContactForm()

    return render(request , 'contactus/contact_us.html' , {'form':form , 'sent':sent})
forms.py
from django import forms 




class ContactForm(forms.Form):
    name = forms.CharField(max_length=250, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Enter Your Name'}) , label='')
    email = forms.EmailField(widget=forms.EmailInput(attrs={'class': 'form-control', 'placeholder': 'Enter Your Email'}),label='')
    subject = forms.CharField(max_length=250, widget=forms.TextInput(attrs={'class': 'form-control', 'placeholder': 'Write Subject'}), label='')
    message = forms.CharField(widget=forms.Textarea(attrs={'class': 'form-control', 'placeholder': 'Write your Message'}),label='')

urls.py
from django.urls import path
from . import views


app_name = 'contactus'


urlpatterns = [
    path('' , views.contact_us , name='contactus')
]
---------------------------------------------------------------------------------------------------------------
copunsApp
views.py
from django.shortcuts import render, redirect
from django.utils import timezone
from django.views.decorators.http import require_POST
from .models import Coupon
from .forms import CouponApplyForm




@require_POST
def coupon_apply(request):
    now = timezone.now()
    form = CouponApplyForm(request.POST)
    if form.is_valid():
        code = form.cleaned_data['code']  # stored date 
        try:
            coupon = Coupon.objects.get(code__iexact=code , valid_from__lte=now , valid_to__gte=now , active=True)
            request.session['coupon_id'] = coupon.id   # stores it in the user’s session.
        except Coupon.DoesNotExist: 
            request.session['coupon_id'] = None
    return redirect('cart:cart_detail')         





def get_coupon(request):
    coupons = Coupon.objects.all()

    return render(request , 'store/coupons.html' , {'coupons':coupons})
models.py
from django.db import models
from django.core.validators import MinValueValidator , MaxValueValidator



class Coupon(models.Model):
    code = models.CharField(max_length=50 , unique=True)
    valid_from = models.DateTimeField()
    valid_to = models.DateTimeField()
    discount = models.IntegerField(validators=[MinValueValidator(0) , MaxValueValidator(100)] , help_text="Percentage value (0 to 100)") # this is a percentage, so it takes values from 0 to 100%
    active = models.BooleanField()

    def __str__(self):
        return self.code

forms.py
from django import forms


class CouponApplyForm(forms.Form):
    code = forms.CharField(max_length=100 , widget=forms.TextInput(attrs={
    'placeholder':"Coupon Code",
     'class':"form-control border-0 p-4",

    }))

urls.py
from django.urls import path
from . import views


app_name = 'coupons'

urlpatterns = [
    path('apply/' , views.coupon_apply , name='apply'),
    path('get-coupon/' , views.get_coupon , name='get_coupon')
]

--------------------------------------------------------------------------------------------
mainstoreFolder
settings.py
from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-mam=dr@p%f1#99o%x6kkcu4tz%+!48obame2iu3#()&0g4n-iy'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'store',
    'cart',
    'orders',
    'accounts',
    'contactus',
    'coupons',
    'seller',
    'seller_account',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main_store.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR , 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'cart.context_processors.cart',
            ],
        },
    },
]

WSGI_APPLICATION = 'main_store.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# settings.py

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mydb',
        'USER': 'postgres',
        'PASSWORD': '111',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}



# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR , 'static')
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR , 'main_store/static')
]


#media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
CART_SESSION_ID = 'cart'

REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0



AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]
AUTH_USER_MODEL = 'accounts.Account'


from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.ERROR: "danger",
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'ahmed.mahran8069@gmail.com'
EMAIL_HOST_PASSWORD = 'sulx baqu plfb awox'
EMAIL_USE_TLS =True



LOGIN_REDIRECT_URL = 'seller_account:dashboard'
LOGIN_URL = 'seller_account:login'
LOGOUT_URL = 'seller_account:logout'

--------------------------------------------------------------------------------------------
celery.py
import os 
from celery import Celery


# set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'main_store.settings')



app = Celery('main_store')
app.config_from_object('django.conf:settings', namespace='CELERY')
app.autodiscover_tasks()
--------------------------------------------------------------------------------------------
asgi.py
"""
ASGI config for main_store project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'main_store.settings')

application = get_asgi_application()

--------------------------------------------------------------------------------------------
urls.py
from django.contrib import admin
from django.urls import path , include
from django.conf import settings
from django.conf.urls.static import static

admin.site.index_title = "Promo"
admin.site.site_header = "Promo Admin"
admin.site.site_title = "Promo-Ecommerce"


urlpatterns = [
    path('admin/', admin.site.urls),
    path('accounts/' , include('accounts.urls' , namespace='accounts')),
    path('contact-us/' , include('contactus.urls' , namespace='contactus')),
    path('cart/' , include('cart.urls' , namespace='cart')),
    path('coupons/', include('coupons.urls', namespace='coupons')),
    path('orders/' , include('orders.urls' , namespace='orders')),
    path('' , include('store.urls', namespace='store')),
    path('join-US-seller/' , include('seller.urls' , namespace='seller')),
    path('seller/account/' , include('seller_account.urls' , namespace='seller_account')),


]
if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
--------------------------------------------------------------------------------------------